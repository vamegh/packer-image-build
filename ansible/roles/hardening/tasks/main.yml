---
#
# Hardening to the CIS recommendations.
#

# 1.1 Filesystem hardening
# 3.5 Network protocol hardening
- name: Remove unneeded kernel modules
  template:
    src: modprobe_cis.conf.j2
    dest: /etc/modprobe.d/cis.conf
    owner: root
    group: root
    mode: 640

# 1.5 Process hardening
# 1.5.1 Restrict Core Dumps
- name: Limit Core Dumps
  lineinfile:
    path: /etc/security/limits.conf
    state: present
    line: '* hard core 0'

- name: Prevent Core Dumps from SUID process
  sysctl:
    name: fs.suid_dumpable
    value: 0
    state: present
    sysctl_set: yes
    reload: yes

# 1.5.3 Enable ASLR if not already on
- name: Set ASLR
  sysctl:
    name: kernel.randomize_va_space
    value: 2
    state: present
    sysctl_set: yes
    reload: yes

#
# Add and remove packages that we need.
#
- name: Package Management - Debian
  include: debian_packages.yml
  when: ansible_os_family == 'Debian'

- name: Package Management - Redhat
  include: redhat_packages.yml
  when: ansible_os_family == 'RedHat'

# 1.7 Warning Banners
# 1.7.1.1 Set /etc/motd
# Stop header, cloudguest, help-text, updates, upgrade and overlayroot scripts from running.
- name: Remove execute bit from motd scripts. Debian/Ububtu only
  file:
    path: "/etc/update-motd.d/{{ item }}"
    owner: root
    group: root
    state: touch
    mode: "u-x,g-x,o-x"
  with_items:
    - "00-header"
    - "10-help-text"
    - "51-cloudguest"
    - "90-updates-available"
    - "91-release-upgrade"
    - "97-overlayroot"
  when: ansible_os_family == 'Debian'

# Add MOTD warning to /etc/motd.tail
- name: Copy MOTD text into /etc/motd.tail
  template:
    src: motd.j2
    dest: /etc/motd.tail
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  when: ansible_os_family == 'Debian'

# Copy MOTD text into /etc/motd for RedHat
- name: Copy MOTD text into /etc/motd
  template:
    src: motd.j2
    dest: /etc/motd
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  when: ansible_os_family == 'RedHat'

# 1.7.1.5 Permissions and contents on /etc/issue
- name: Copy Dummy text into /etc/issue
  template:
    src: issue.j2
    dest: /etc/issue
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

# 1.7.1.6 Permissions and contents on /etc/issue.net
- name: Copy Dummy text into /etc/issue
  template:
    src: issue.j2
    dest: /etc/issue.net
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

# 2.2 Time - Ubuntu uses timesyncd by default which only runs on network interface state change.
- name: Copy ntp.conf text into /etc/ntp.conf
  template:
    src: ntp.j2
    dest: /etc/ntp.conf
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Debian - restart ntp
  service:
    name: ntp
    enabled: yes
    state: restarted
  when: ansible_os_family == 'Debian'

- name: RedHat - restart ntp
  service:
    name: ntpd
    enabled: yes
    state: restarted
  when: ansible_os_family == 'RedHat'

# 2.2 Remove unnecessary service packages
# NFS is required for some AWS drive types.
# AVAHI, CUPS, DHCP, LDAP, RPC, DNS, FTP, HTTP, IMAP/POP3, SAMBA, HTTP Proxy, SNMP, RSYNC, NIS


# 2.2.15 Postfix
- name: Configure Postfix
  template:
    src: postfix_main.cf.j2
    dest: /etc/postfix/main.cf
    owner: root
    group: root
    mode: 640
  notify: restart postfix

# 2.2.16
- name: Disable rsync
  systemd:
    name: rsync
    state: stopped
    enabled: true
    masked: true
  ignore_errors: yes
  when: ansible_os_family == 'Debian'

- name: Disable rsync
  service:
    name: rsync
    state: stopped
    enabled: no
  ignore_errors: yes
  when: ansible_os_family == 'RedHat'

# 3 Network Configuration

# 3.1.2 Disable Sending ICMP Redirects
- name: Disable Sending IP Redirects
  sysctl:
    name: net.ipv4.conf.{{ item }}.send_redirects
    value: 0
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.1 Disable Source Routed packets
- name: Disable IP Source Routed
  sysctl:
    name: net.ipv4.conf.{{ item }}.accept_source_route
    value: 0
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.2 Disable Receiving ICMP Redirects
- name: Disable Receiving IP Redirects
  sysctl:
    name: net.ipv4.conf.{{ item }}.accept_redirects
    value: 0
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.3 Disable Secure ICMP Redirects
# No reason we should ever deal with a redirect really, usually means routing is misconfigured.
- name: Disable Secure IP Redirects
  sysctl:
    name: net.ipv4.conf.{{ item }}.secure_redirects
    value: 0
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.4 Log Martian packets
- name: Log Martian packets
  sysctl:
    name: net.ipv4.conf.{{ item }}.log_martians
    value: 1
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.5 Ignore Broadcast ICMP
- name: Ignore Broadcast ICMP
  sysctl:
    name: net.ipv4.icmp_echo_ignore_broadcasts
    value: 1
    state: present
    sysctl_set: yes
    reload: yes

# 3.2.6 Ignore bogus ICMP responses
- name: Ignore Broadcast ICMP
  sysctl:
    name: net.ipv4.icmp_ignore_bogus_error_responses
    value: 1
    state: present
    sysctl_set: yes
    reload: yes

# 3.2.7 Enable reverse path forwarding checks
- name: Enable reverse path forwarding checks
  sysctl:
    name: "net.ipv4.conf.{{item}}.rp_filter"
    value: 1
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# 3.2.8 Enable TCP SYN Cookies
- name: Enable TCP SYN Cookies
  sysctl:
    name: net.ipv4.tcp_syncookies
    value: 1
    state: present
    sysctl_set: yes
    reload: yes

# 3.3 IPv6
# 3.3.1 Ignoring this one, they're trying to solve the problem at the wonrg level and it demonstrates a complete misunderstanding of the security domain.

# 3.3.2 Disable IPv6 redirects.
- name: Disable IPv6 redirects.
  sysctl:
    name: "net.ipv6.conf.{{item}}.accept_redirects"
    value: 0
    state: present
    sysctl_set: yes
    reload: yes
  with_items:
    - "all"
    - "default"

# Flush route cache
- name: Flush route cache
  command: sysctl -w net.ipv4.route.flush=1

# 3.3.3 Leaving IPv6 enabled as we are aiming to dual stack the environment.

# 3.4.1 Ensure TCP Wrappers are installed.
# Not installing any services that can benefit from TCP wrappers so not installing. Skipping requirement.?
# Auditd uses TCP wrappers service.

# 3.4.3 Ensure /etc/hosts.allow and .deny
- name: Setup hosts.allow
  template:
    src: hosts.allow.j2
    dest: /etc/hosts.allow
    owner: root
    group: root
    mode: 0644

- name: Setup hosts.deny
  template:
    src: hosts.deny.j2
    dest: /etc/hosts.deny
    owner: root
    group: root
    mode: 0644

# 3.5 is for optional protocols that don't come with modules installed by default.

# 3.6 Firewall Configuration
# Using AWS security groups, these are configured with the service and it's far less error prone to configure one firewall rather than maintain two configurations across two different services.

# 3.7 Wireless Networks
# We're using AWS virtual servers, there are no wireless network interfaces.

# 4 Logging and Auditing

# 4.1 Auditd is optional. Configure it and set to forward to a central server.
# Boot parameter needs adding to enable audit on all services. audit=1
# No need to meet level 2 certification at present so we are taking a common sense approach to enabling the least disruptive features.
# As auditd config is optional we have taken the view that the TCP Wrappers capability for auditd is also optional.
# The firewall configuration is more than capable of controlling access to the listener ports, we do not need to add another piece of software.

- name: Setup auditd.conf
  template:
    src: auditd.conf.j2
    dest: /etc/audit/auditd.conf
    owner: root
    group: root
    mode: 0600
  notify: restart auditd

- name: Setup audit.rules
  template:
    src: audit.rules.j2
    dest: /etc/audit/audit.rules
    owner: root
    group: root
    mode: 0600
  notify: restart auditd

- name: Debian - Set GRUB to enable auditd on all processes
  lineinfile:
    path: /etc/default/grub
    state: present
    regexp: '^GRUB_CMDLINE_LINUX='
    line: 'GRUB_CMDLINE_LINUX="audit=1"'
  when: ansible_os_family == 'Debian'

- name: Debian - Update the GRUB config
  command: update-grub
  when: ansible_os_family == 'Debian'

# Regexp implementation note:
  #  - the line to match follows the following pattern:
  #     - <startofline>: matched by ^
  #     - A number of white spaces/tabs: matched by \s*
  #     - the "kernel" string: matched by kernel
  #     - A list of: <spaces|tab><string> -> this is all the options passed to the kernel
  #     - possible spaces and tabs at the end : matched by the latest \s*
  #     - the <end of line>: matched by $
  #  - the list of: <spaces|tab><string1> described above
  #    e.g:  /vmlinuz-2.6.32-358.el6.x86_64 ro root=/dev/mapper/VolGroup00-root_vol … rd_LVM_LV=VolGroup00/root_vol SYSFONT=latarcyrheb-sun16 rd_NO_DM
  #    is matched by: (\s*(?!audit=1)[\w=/\-\.]+)*
  #    The (?!audit=1) is to direct the regexp engine to check that the string 'audit=1' is not present
  #       anywhere in the in the <string1> part. This is called negative lookahead.
  #       This is just a check, no characters are "consumed". The following [\w=/\-\.]+
  #       is there to consume aka match any strings made of alphanumeric characters,the '/', the '-', the '.'
  #  - if the 'audit=1' string is present, there is no match
  #  - the capturing group 1 referred as to \1 in the line= statement
  #    will capture the whole line but the trailing <withe spaces> and <end of line>
- name: RedHat - Set GRUB to enable auditd on all processes
  lineinfile:
    path: /boot/grub/menu.lst
    state: present
    regexp: '(^\s*kernel(\s+(?!audit=1)[\w=/\-\.]+)*)\s*$'
    line: '\1 audit=1'
    backrefs: yes
  when: ansible_os_family == 'RedHat'



# 4.2 Configure rsyslog
- name: Configure rsyslog
  template:
    src: rsyslog.conf.j2
    dest: /etc/rsyslog.conf
    owner: root
    group: root
    mode: 0644
  notify: restart rsyslog

# Problems with AWS Linux not pre-creating some of the files we need to write to.
# Results in boxes with no local logging.
- name: Ensure logging files are present and writeable
  file:
    path: "/var/log/{{item}}"
    owner: syslog
    group: adm
    mode: 0640
    state: touch
  with_items:
    - auth.log
    - kern.log
    - mail.err
    - mail.log
    - syslog
    - cron.log
    - daemon.log
    - user.log
    - messages

# No need to restart logrotate, it's run by cron, not a service.
- name: Configure logrotate defaults
  template:
    src: logrotate-rsyslog.j2
    dest: /etc/logrotate.d/rsyslog
    owner: root
    group: root
    mode: 0644

- name: Configure rsyslog defaults
  template:
    src: 50-default.conf.j2
    dest: /etc/rsyslog.d/50-default.conf
    owner: root
    group: root
    mode: 0644
  notify: restart rsyslog

- name: Create spool directory for logging queue
  file:
    path: /var/spool/rsyslog
    state: directory
    owner: syslog
    group: syslog
    mode: 0640

- name: Ensure log permissions
  shell: "chmod -R g-wx,o-rwx /var/log/*"


# 5

# 5.1 Cron
- include: cron.yml

# 5.2 SSH - taken care of by SSH role

# 5.3 Pam
- include: pam.yml

# 5.4.4
- name: Ensure umask is set in /etc/profile
  shell: 'echo "umask 027" >> /etc/profile'

- name: Ensure umask is set in /etc/bash.bashrc
  shell: 'echo "umask 027" >> /etc/bash.bashrc'

# 6.2.6
- name: Ensure directories in root path are owned by root
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - '/snap/bin'

# 6.2.8
- name: Ensure root directory permissions
  shell: "chmod -R g-wx,o-rwx /home/*"
